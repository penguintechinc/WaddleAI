version: '3.8'

services:
  # WaddleAI Proxy Server - OpenAI-compatible API endpoint
  waddleai-proxy:
    build: 
      context: .
      dockerfile: proxy/Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://waddleai:${POSTGRES_PASSWORD:-password}@postgres:5432/waddleai
      - MANAGEMENT_SERVER_URL=http://waddleai-mgmt:8001
      - JWT_SECRET=${JWT_SECRET:-change-in-production}
      - SECURITY_POLICY=${SECURITY_POLICY:-balanced}
      - REDIS_URL=redis://redis:6379/0
      # OpenAI API compatibility settings
      - OPENAI_COMPATIBILITY_MODE=true
      - CORS_ALLOWED_ORIGINS=http://localhost:3001,http://openwebui:8080
    depends_on:
      postgres:
        condition: service_healthy
      waddleai-mgmt:
        condition: service_started
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./proxy/logs:/app/logs
    networks:
      - waddleai-network

  # WaddleAI Management Server
  waddleai-mgmt:
    build:
      context: .
      dockerfile: management/Dockerfile
    ports:
      - "8001:8001"
    environment:
      - DATABASE_URL=postgresql://waddleai:${POSTGRES_PASSWORD:-password}@postgres:5432/waddleai
      - JWT_SECRET=${JWT_SECRET:-change-in-production}
      - REDIS_URL=redis://redis:6379/1
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    volumes:
      - ./management/logs:/app/logs
    networks:
      - waddleai-network

  # OpenWebUI - Modern UI for LLM interactions
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: openwebui
    volumes:
      - openwebui_data:/app/backend/data
    ports:
      - "3001:8080"
    environment:
      # Point OpenWebUI to WaddleAI proxy server
      - OPENAI_API_BASE_URL=http://waddleai-proxy:8000/v1
      - OPENAI_API_KEY=${WADDLEAI_API_KEY:-wa-dummy-key-for-testing}
      
      # OpenWebUI Configuration
      - WEBUI_NAME=WaddleAI Chat Interface
      - WEBUI_URL=http://localhost:3001
      - DEFAULT_USER_ROLE=user
      - ENABLE_SIGNUP=true
      
      # Security and Features
      - ENABLE_IMAGE_GENERATION=false
      - ENABLE_COMMUNITY_SHARING=false
      - ENABLE_MODEL_FILTER=true
      - ENABLE_ADMIN_EXPORT=true
      
      # Logging
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-openwebui-secret-change-in-production}
      - LOG_LEVEL=INFO
      
      # Advanced Features
      - RAG_EMBEDDING_ENGINE=sentence-transformers
      - CHUNK_SIZE=1000
      - CHUNK_OVERLAP=200
      
      # Disable external services that might conflict
      - ENABLE_OLLAMA_API=false
      - OLLAMA_BASE_URL=""
      
    depends_on:
      waddleai-proxy:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - waddleai-network

  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: waddleai-postgres
    environment:
      - POSTGRES_DB=waddleai
      - POSTGRES_USER=waddleai
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"  # Expose for external connections if needed
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U waddleai -d waddleai"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - waddleai-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: waddleai-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis-password}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"  # Expose for external connections if needed
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "auth", "${REDIS_PASSWORD:-redis-password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - waddleai-network

  # Optional: WaddleAI Documentation
  docs:
    build:
      context: docs/docs-site
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - waddleai-network

  # Optional: WaddleAI Marketing Website
  website:
    build:
      context: website
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    restart: unless-stopped
    networks:
      - waddleai-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  openwebui_data:
    driver: local

networks:
  waddleai-network:
    driver: bridge
    name: waddleai-testing